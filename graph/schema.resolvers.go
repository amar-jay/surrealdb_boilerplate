package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"

	"github.com/amar-jay/surreal/db"
	"github.com/amar-jay/surreal/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	d := db.TodoRepo{Db: r.Db, Ctx: ctx}
	newTodo, err := d.CreateTodo(&input)

	if err != nil {
		return nil, err
	}

	return newTodo, nil
	//newTodo := db.CreateTodo(&input);
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id string) (bool, error) {
	d := db.TodoRepo{Db: r.Db, Ctx: ctx}
	deleted, err := d.DeleteTodo(id)

	if err != nil {
		return false, err
	}
	if deleted {
		return true, nil
	}

	return false, fmt.Errorf("todo not found")
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	d := db.TodoRepo{Db: r.Db, Ctx: ctx}

	return d.GetTodos(), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
